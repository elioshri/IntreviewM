######################################################################
# 📌 10 – Python Gold Questions (Data Analyst)
#
# שאלות–תשובות מקיפות בנושאים שונים (מעבר לפנדס ונאמפיי),
# עם דגש על מה שבדרך כלל "נופל במבחן" או מפתיע.
######################################################################

import re, json, statistics
import pandas as pd
import numpy as np

# ==============================================================
# Q1: מצא מספר הופעות של כל מילה במשפט
# ==============================================================

text = "data analyst role data prediction data"
counts = {}
for w in text.split():
    counts[w] = counts.get(w, 0) + 1
print("Q1:", counts)

# ==============================================================
# Q2: flatten – הפוך רשימת רשימות לרשימה אחת
# ==============================================================

nested = [[1,2],[3,4],[5]]
flat = [x for sub in nested for x in sub]
print("Q2:", flat)

# ==============================================================
# Q3: מצא את שני הערכים הגדולים ביותר ברשימה (בלי sort מלא)
# ==============================================================

nums = [10,4,99,23,54,87]
largest, second = float("-inf"), float("-inf")
for n in nums:
    if n > largest:
        largest, second = n, largest
    elif n > second:
        second = n
print("Q3:", largest, second)

# ==============================================================
# Q4: Regex – חילוץ כל האימיילים מטקסט
# ==============================================================

txt = "Contact us at data@test.com or info@company.co.il"
emails = re.findall(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}", txt)
print("Q4:", emails)

# ==============================================================
# Q5: קריאת JSON והמרה ל-DataFrame
# ==============================================================

doc = '[{"id":1,"score":90},{"id":2,"score":85}]'
parsed = json.loads(doc)
df = pd.DataFrame(parsed)
print("Q5:\n", df)

# ==============================================================
# Q6: סטטיסטיקה – חציון, סטיית תקן, קוורטילים
# ==============================================================

arr = [10,20,30,40,50,100]
print("Q6 median:", statistics.median(arr),
      "std:", statistics.pstdev(arr),
      "q1,q3:", np.percentile(arr,[25,75]))

# ==============================================================
# Q7: פונקציה רקורסיבית – חישוב faculty (n!)
# ==============================================================

def fact(n):
    return 1 if n<=1 else n*fact(n-1)

print("Q7 5!:", fact(5))

# ==============================================================
# Q8: כתיבה וקריאה של CSV קטן
# ==============================================================

df.to_csv("out.csv", index=False)
df_back = pd.read_csv("out.csv")
print("Q8 read:", df_back.head())

# ==============================================================
# Q9: בדיקת איזון סוגריים במחרוזת
# ==============================================================

s = "((1+2)*(3+4))"
stack = []
ok = True
for ch in s:
    if ch=="(":
        stack.append(ch)
    elif ch==")":
        if not stack: ok=False; break
        stack.pop()
ok = ok and not stack
print("Q9 balanced?", ok)

# ==============================================================
# Q10: חישוב קורלציה ידנית בין שני וקטורים
# ==============================================================

x = np.array([1,2,3,4,5])
y = np.array([2,4,5,4,5])
corr = np.corrcoef(x,y)[0,1]
print("Q10 corr:", corr)

######################################################################
# 💡 טיפים:
# • תמיד לחשוב על edge-cases (רשימה ריקה, None, טקסט בלי אימיילים).
# • Regex – חוסך הרבה זמן, שווה לזכור ביטויים בסיסיים.
# • recursion לא נפוץ באנליסטים, אבל לפעמים שואלים כקטע לוגי.
######################################################################
