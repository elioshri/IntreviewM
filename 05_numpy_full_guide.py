######################################################################
# 📌 05 – NumPy: מדריך מלא לדאטא אנליסט
#
# מה יש פה:
#  1) יצירת מערכים ובדיקת מאפיינים
#  2) אינדוקס, חיתוכים, מסכות
#  3) פעולות מתמטיות, סטטיסטיקה ואגרגציה
#  4) שינויים בצורת מערך (reshape/transpose/stack)
#  5) ברודקאסטינג (Broadcasting)
#  6) פעולות על טקסט/תאריכים ב-NumPy
#  7) Missing Values (NaN/inf)
#  8) וקטוריזציה מול לולאות – ביצועים
#  9) דוגמאות אנליסטיות: קורלציה, סטנדרטיזציה, bins
# 10) שמירה/טעינה (np.save, np.load, np.savetxt, np.genfromtxt)
######################################################################

import numpy as np

# ==============================================================
# 1) יצירת מערכים ובדיקת מאפיינים
# ==============================================================

a = np.array([1,2,3,4])
b = np.array([[1,2,3],[4,5,6]], dtype=np.float64)

print("\n[a] ", a)
print("[b] \n", b)
print("shape:", b.shape, "dtype:", b.dtype, "ndim:", b.ndim, "size:", b.size)

# פונקציות בנייה
z = np.zeros((2,3))
o = np.ones((2,2))
rng = np.arange(0,10,2)   # כמו range אבל מחזיר array
lin = np.linspace(0,1,5)  # 5 ערכים מ-0 עד 1
eye = np.eye(3)           # מטריצת יחידה 3x3
rnd = np.random.rand(2,3) # מקרי (0–1)

# ==============================================================
# 2) אינדוקס, חיתוכים, מסכות
# ==============================================================

arr = np.array([[10,20,30],[40,50,60],[70,80,90]])
print("\n[arr]\n", arr)

# גישה לפי אינדקס
print("arr[0,1] =", arr[0,1])   # 20
print("שורה ראשונה:", arr[0])
print("עמודה שניה:", arr[:,1])

# חיתוך (slicing)
print("arr[0:2, 1:3]\n", arr[0:2,1:3])

# מסכות
mask = arr > 50
print("mask\n", mask)
print("arr[mask]\n", arr[mask]) # כל הערכים מעל 50

# אינדוקס לפי רשימת מיקומים
print("arr[[0,2],[1,0]] =", arr[[0,2],[1,0]])  # [20,70]


# ==============================================================
# 3) פעולות מתמטיות, סטטיסטיקה ואגרגציה
# ==============================================================

x = np.array([1,2,3,4,5])
print("\nחיבור:", x+10, "כפל:", x*2)
print("סכום:", x.sum(), "ממוצע:", x.mean(), "שונות:", x.var(), "סטיית תקן:", x.std())
print("מקסימום:", x.max(), "argmax:", x.argmax(), "מינימום:", x.min())

# פעולות שורה/עמודה במטריצה
M = np.array([[1,2,3],[4,5,6]])
print("sum axis=0 (עמודות):", M.sum(axis=0))
print("sum axis=1 (שורות):", M.sum(axis=1))

# קורלציה ומטריצה
print("קורלציה:\n", np.corrcoef(M))


# ==============================================================
# 4) שינויים בצורת מערך (reshape/transpose/stack)
# ==============================================================

r = np.arange(1,7)        # [1..6]
R = r.reshape((2,3))      # מטריצה 2x3
print("\n[R]\n", R)

Rt = R.T                  # טרנספוז
print("transpose\n", Rt)

# stack – חיבור מערכים
c1 = np.array([1,2,3])
c2 = np.array([4,5,6])
print("stack axis=0\n", np.stack([c1,c2], axis=0))
print("stack axis=1\n", np.stack([c1,c2], axis=1))


# ==============================================================
# 5) ברודקאסטינג (Broadcasting)
# ==============================================================

X = np.array([[1,2,3],[4,5,6]])
v = np.array([10,20,30])
print("\nX+v\n", X+v)   # כל שורה מקבלת את v

col = np.array([[1],[2]])
print("X*col\n", X*col) # כל עמודה מוכפלת בערכים


# ==============================================================
# 6) טקסט ותאריכים ב-NumPy
# ==============================================================

dates = np.array(["2025-01-01","2025-02-01"], dtype="datetime64[D]")
print("\n[dates]", dates, dates.dtype)
print("days diff:", dates[1]-dates[0])  # 31 ימים

# זמן דקה/שעה
ts = np.array(["2025-01-01T12:00","2025-01-01T14:30"], dtype="datetime64[m]")
print("minutes diff:", ts[1]-ts[0])


# ==============================================================
# 7) Missing Values (NaN/inf)
# ==============================================================

xx = np.array([1,2,np.nan,4,np.inf])
print("\nNaN check:", np.isnan(xx))
print("isfinite:", np.isfinite(xx))

# טיפול – להחליף NaN ב-0
xx_clean = np.nan_to_num(xx, nan=0.0, posinf=9999)
print("clean:", xx_clean)


# ==============================================================
# 8) וקטוריזציה מול לולאות – ביצועים
# ==============================================================

N = 10**5
data = np.arange(N)
# ❌ לולאה
%timeit [x**2 for x in data]  # (ב-Jupyter)
# ✅ NumPy vectorized
%timeit data**2


# ==============================================================
# 9) דוגמאות אנליסטיות
# ==============================================================

# סטנדרטיזציה (Z-score)
vals = np.array([10,20,30,40])
zscore = (vals - vals.mean()) / vals.std()
print("\n[zscore]", zscore)

# bins – חלוקת ערכים לקטגוריות
ages = np.array([5,12,17,25,40,70])
bins = [0,12,18,35,60,120]
labels = ["child","teen","young_adult","adult","senior"]
cats = np.array(pd.cut(ages, bins=bins, labels=labels))
print("[ages bins]", list(zip(ages,cats)))

# מטריצת קורלציה של דאטה אקראי
mat = np.random.randn(5,4)
corr = np.corrcoef(mat,rowvar=False)
print("\n[corr matrix]\n", corr)


# ==============================================================
# 10) שמירה/טעינה
# ==============================================================

arr = np.arange(10)

# שמירה בינארית
np.save("arr.npy", arr)
arr2 = np.load("arr.npy")

# שמירה טקסטואלית
np.savetxt("arr.csv", arr, delimiter=",")
arr3 = np.genfromtxt("arr.csv", delimiter=",")

print("\n[save/load] arr2:", arr2, "arr3:", arr3)
######################################################################
# 💡 TL;DR – טיפים חשובים:
# • השתמשו ב-ndarray (לא לולאות) → פי עשרות ביצועים.
# • axis=0 = שורות (down), axis=1 = עמודות (across).
# • NaN/inf → np.isnan / np.isfinite / np.nan_to_num.
# • datetime64 יעיל מאוד, עדיף על pandas לוקטור פשוט.
# • Broadcasting חוסך המון קוד.
# • עדיף np.save/np.load על pickle – יותר מהיר וקומפקטי.
######################################################################
