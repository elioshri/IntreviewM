/**********************************************************************
* 📌 05 – SQL SERVER SIMPLE TIPS (בינוני)
* אוסף טיפים וטריקים פשוטים שממש שימושיים לראיונות ולעבודה יומיומית
**********************************************************************/

----------------------------------------------------------------------
-- 1) ספירה חכמה
----------------------------------------------------------------------

-- COUNT(*) סופר גם NULL
SELECT COUNT(*) AS all_rows FROM dbo.Orders;

-- COUNT(column) סופר רק ערכים לא NULL
SELECT COUNT(CustomerID) AS not_nulls FROM dbo.Customers;

-- טיפ: אם רוצים לבדוק "כמה רשומות ייחודיות" → COUNT(DISTINCT col)
SELECT COUNT(DISTINCT CustomerID) AS unique_customers FROM dbo.Orders;


----------------------------------------------------------------------
-- 2) טיפול ב-NULL
----------------------------------------------------------------------

-- ISNULL מחליף ערך בברירת מחדל
SELECT ISNULL(MiddleName,'---') AS mid FROM dbo.Customers;

-- COALESCE מחזיר את הערך הראשון שלא NULL מתוך כמה
SELECT COALESCE(Phone, Email, 'N/A') AS contact FROM dbo.Customers;


----------------------------------------------------------------------
-- 3) תנאי בתוך SELECT עם CASE
----------------------------------------------------------------------

SELECT
  OrderID,
  Amount,
  CASE
    WHEN Amount >= 200 THEN 'High'
    WHEN Amount >= 100 THEN 'Medium'
    ELSE 'Low'
  END AS order_size
FROM dbo.Orders;

-- טיפ: CASE עובד גם בתוך SUM/COUNT → פיצול לפי תנאים
SELECT
  SUM(CASE WHEN Amount >= 200 THEN 1 ELSE 0 END) AS big_orders,
  SUM(CASE WHEN Amount < 200  THEN 1 ELSE 0 END) AS small_orders
FROM dbo.Orders;


----------------------------------------------------------------------
-- 4) חיפוש טקסט חלקי
----------------------------------------------------------------------

-- LIKE עם %
SELECT * FROM dbo.Customers
WHERE CustomerName LIKE N'%אבי%';   -- מחפש כל שם שמכיל "אבי"

-- ILIKE לא קיים ב-SQL Server, אבל אפשר COLLATE ללא רגישות רישיות
SELECT * FROM dbo.Customers
WHERE CustomerName COLLATE Latin1_General_CI_AI LIKE '%avi%';


----------------------------------------------------------------------
-- 5) שימוש ב-ALIAS (שם מקוצר)
----------------------------------------------------------------------

SELECT o.OrderID, c.CustomerName
FROM dbo.Orders AS o
JOIN dbo.Customers AS c
  ON c.CustomerID = o.CustomerID;

-- טיפ: ברגע שנותנים alias, חייבים להשתמש בו באותה שאילתה.


----------------------------------------------------------------------
-- 6) TOP ו-ORDER BY
----------------------------------------------------------------------

-- TOP מחזיר N רשומות
SELECT TOP (5) * FROM dbo.Orders ORDER BY Amount DESC;

-- אחוז מהטבלה
SELECT TOP (10) PERCENT * FROM dbo.Orders ORDER BY OrderDate;


----------------------------------------------------------------------
-- 7) שימוש ב-BETWEEN
----------------------------------------------------------------------

SELECT * FROM dbo.Orders
WHERE OrderDate BETWEEN '2025-01-01' AND '2025-06-30';

-- טיפ: BETWEEN כולל את הגבולות (inclusive).


----------------------------------------------------------------------
-- 8) פונקציות תאריכים נפוצות
----------------------------------------------------------------------

SELECT
  GETDATE() AS now,
  EOMONTH(GETDATE()) AS end_of_month,
  DATEADD(DAY,7,GETDATE()) AS next_week,
  DATEDIFF(DAY,'2025-01-01',GETDATE()) AS days_passed;

-- טיפ: תמיד עדיף לעבוד עם DATE/DATETIME2 ולא עם VARCHAR תאריך.


----------------------------------------------------------------------
-- 9) מיון לפי כמה עמודות
----------------------------------------------------------------------

SELECT * FROM dbo.Orders
ORDER BY CustomerID ASC, OrderDate DESC;

-- טיפ: סדר ברשימת ORDER BY משפיע על התוצאה.
-- ASC = עולה (ברירת מחדל), DESC = יורד.


----------------------------------------------------------------------
-- 10) שימוש ב-IN לעומת OR
----------------------------------------------------------------------

-- במקום לכתוב OR OR OR
SELECT * FROM dbo.Customers
WHERE City IN (N'תל אביב',N'חיפה',N'ירושלים');


----------------------------------------------------------------------
-- 11) DISTINCT להסרת כפילויות
----------------------------------------------------------------------

SELECT DISTINCT City FROM dbo.Customers;

-- טיפ: אפשר גם COUNT(DISTINCT City) לקבל כמה ערים שונות יש.


----------------------------------------------------------------------
-- 12) שאילתה בתוך שאילתה (Subquery פשוט)
----------------------------------------------------------------------

-- מציאת כל ההזמנות שגבוהות מהממוצע
SELECT * FROM dbo.Orders
WHERE Amount > (
  SELECT AVG(Amount) FROM dbo.Orders
);


----------------------------------------------------------------------
-- 13) שימוש ב-STRING_AGG (גרסה 2017+)
----------------------------------------------------------------------

-- מחבר ערכים לטקסט אחד
SELECT CustomerID,
       STRING_AGG(CAST(OrderID AS NVARCHAR(20)), ',') AS orders_list
FROM dbo.Orders
GROUP BY CustomerID;


----------------------------------------------------------------------
-- 14) OFFSET / FETCH – פגינציה
----------------------------------------------------------------------

-- דילוג על 20 רשומות והבאת 10
SELECT OrderID, CustomerID, Amount
FROM dbo.Orders
ORDER BY OrderDate
OFFSET 20 ROWS FETCH NEXT 10 ROWS ONLY;


----------------------------------------------------------------------
-- 15) הערות חשובות
-- • אל תשתמש SELECT * בראיונות → תמיד ציין עמודות
-- • בדוק NULL עם IS NULL / IS NOT NULL
-- • ב-CASE אין צורך ב-ELSE אם לא חייבים
-- • תמיד ציין ORDER BY אם חשוב סדר תוצאה
-- • TOP בלי ORDER BY = אקראי! (לא מובטח סדר)
-- • השתמש ב-ALIAS קצר (o,c) כדי לשמור קריאות
-- • COUNT(*) ≠ COUNT(column) – תדע את ההבדל
----------------------------------------------------------------------
